{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport DetailsMat from \"./DetailsMats\";\nimport styles from \"../styles/style-mats\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\n\nfunction Mats(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      mats = _useState2[0],\n      setMats = _useState2[1];\n\n  var getMats = function getMats() {\n    var response, json;\n    return _regeneratorRuntime.async(function getMats$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://api.atlasacademy.io/export/NA/nice_item.json'));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context.sent;\n            setMats(json.filter);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  useEffect(function () {\n    getMats();\n  }, []);\n  return _jsx(ScrollView, {\n    contentContainerStyle: styles.container,\n    horizontal: true,\n    children: _jsx(View, {\n      style: styles.view,\n      children: _jsx(FlatList, {\n        data: mats,\n        numColumns: 2,\n        renderItem: function renderItem(_ref2) {\n          var item = _ref2.item;\n          return _jsxs(View, {\n            style: styles.containerItem,\n            children: [_jsx(Text, {\n              style: styles.text,\n              children: item.name\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return navigation.navigate(\"Details\", {\n                  mat: item\n                });\n              },\n              children: _jsx(Image, {\n                style: styles.img,\n                source: {\n                  uri: item.icon\n                }\n              })\n            })]\n          });\n        }\n      })\n    })\n  });\n}\n\nexport default function AppMats() {\n  return _jsxs(Stack.Navigator, {\n    initialRouteName: \"Mats\",\n    children: [_jsx(Stack.Screen, {\n      name: \"Mats\",\n      component: Mats,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"Details\",\n      component: DetailsMat,\n      options: {\n        headerShown: false\n      }\n    })]\n  });\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Mod 3_4/React Native/FGO_DB/pages/Craft_essence.js"],"names":["React","useState","useEffect","createNativeStackNavigator","ScrollView","DetailsMat","styles","Stack","Mats","navigation","mats","setMats","getMats","fetch","response","json","filter","console","error","container","view","item","containerItem","text","name","navigate","mat","img","uri","icon","AppMats","headerShown"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;;;AAGA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,OAAOC,UAAP;AACA,OAAOC,MAAP;;;AAEA,IAAMC,KAAK,GAAGJ,0BAA0B,EAAxC;;AAEC,SAASK,IAAT,OAA2B;AAAA,MAAZC,UAAY,QAAZA,UAAY;;AAC1B,kBAAwBR,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOS,IAAP;AAAA,MAAaC,OAAb;;AAEE,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEWC,KAAK,CAAC,sDAAD,CAFhB;;AAAA;AAENC,YAAAA,QAFM;AAAA;AAAA,6CAGOA,QAAQ,CAACC,IAAT,EAHP;;AAAA;AAGNA,YAAAA,IAHM;AAIZJ,YAAAA,OAAO,CAACI,IAAI,CAACC,MAAN,CAAP;AAJY;AAAA;;AAAA;AAAA;AAAA;AAMZC,YAAAA,OAAO,CAACC,KAAR;;AANY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAUAhB,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;AAKA,SACE,KAAC,UAAD;AACA,IAAA,qBAAqB,EAAEN,MAAM,CAACa,SAD9B;AAEA,IAAA,UAAU,MAFV;AAAA,cAGE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEb,MAAM,CAACc,IAApB;AAAA,gBACE,KAAC,QAAD;AACA,QAAA,IAAI,EAAEV,IADN;AAEA,QAAA,UAAU,EAAE,CAFZ;AAGA,QAAA,UAAU,EAAE;AAAA,cAAGW,IAAH,SAAGA,IAAH;AAAA,iBACV,MAAC,IAAD;AAAM,YAAA,KAAK,EAAEf,MAAM,CAACgB,aAApB;AAAA,uBACE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEhB,MAAM,CAACiB,IAApB;AAAA,wBAA2BF,IAAI,CAACG;AAAhC,cADF,EAEE,KAAC,gBAAD;AAAkB,cAAA,OAAO,EAAE;AAAA,uBAAMf,UAAU,CAACgB,QAAX,CAAoB,SAApB,EAA+B;AAACC,kBAAAA,GAAG,EAAEL;AAAN,iBAA/B,CAAN;AAAA,eAA3B;AAAA,wBACE,KAAC,KAAD;AAAO,gBAAA,KAAK,EAAEf,MAAM,CAACqB,GAArB;AAA0B,gBAAA,MAAM,EAAE;AAAEC,kBAAAA,GAAG,EAAEP,IAAI,CAACQ;AAAZ;AAAlC;AADF,cAFF;AAAA,YADU;AAAA;AAHZ;AADF;AAHF,IADF;AAmBH;;AAED,eAAe,SAASC,OAAT,GAAkB;AAC/B,SACE,MAAC,KAAD,CAAO,SAAP;AAAiB,IAAA,gBAAgB,EAAC,MAAlC;AAAA,eACE,KAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,MAAnB;AAA0B,MAAA,SAAS,EAAEtB,IAArC;AAA2C,MAAA,OAAO,EAAE;AAAEuB,QAAAA,WAAW,EAAE;AAAf;AAApD,MADF,EAEE,KAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,SAAnB;AAA6B,MAAA,SAAS,EAAE1B,UAAxC;AAAoD,MAAA,OAAO,EAAE;AAAE0B,QAAAA,WAAW,EAAE;AAAf;AAA7D,MAFF;AAAA,IADF;AAMD","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Image, Text, View, SafeAreaView, FlatList, TouchableOpacity } from 'react-native';\n// import { NavigationContainer, DefaultTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport DetailsMat from \"./DetailsMats\";\nimport styles from \"../styles/style-mats\"\n\nconst Stack = createNativeStackNavigator();\n\n function Mats({navigation}){\n  const [mats, setMats] = useState([]);\n  \n    const getMats = async () => {\n       try {\n        const response = await fetch('https://api.atlasacademy.io/export/NA/nice_item.json');\n        const json = await response.json();\n        setMats(json.filter);\n      } catch (error) {\n        console.error(error);\n      } \n    }\n  \n    useEffect(() => {\n      getMats();\n    }, []);\n\n  \n    return (\n      <ScrollView \n      contentContainerStyle={styles.container} \n      horizontal>\n        <View style={styles.view}>\n          <FlatList\n          data={mats}\n          numColumns={2}\n          renderItem={({ item }) => (\n            <View style={styles.containerItem}>\n              <Text style={styles.text}>{item.name}</Text>\n              <TouchableOpacity onPress={() => navigation.navigate(\"Details\", {mat: item})}>\n                <Image style={styles.img} source={{ uri: item.icon}}/>\n              </TouchableOpacity>\n            </View>\n          )}/>\n        </View>\n      </ScrollView>\n    )\n}\n\nexport default function AppMats(){\n  return(\n    <Stack.Navigator initialRouteName=\"Mats\">\n      <Stack.Screen name=\"Mats\" component={Mats} options={{ headerShown: false }} />\n      <Stack.Screen name=\"Details\" component={DetailsMat} options={{ headerShown: false }}/>\n    </Stack.Navigator>\n )\n}\n"]},"metadata":{},"sourceType":"module"}